#!/usr/bin/env python3
import io
import json
import mimetypes
import sys
import time
import urllib.error
import urllib.request

service = 'https://tmp.fooster.io'
store = 'https://store.fooster.io'
namespace = '/tmp'

interval = 604800 # 1 week

class AliasExistsError(Exception):
	pass

class FileTooLargeError(Exception):
	pass

class BadAliasError(Exception):
	pass

class UnknownError(Exception):
	pass

def upload(stream, alias=None, filename='stream.txt'):
	if alias:
		url = store + '/api' + namespace + '/' + alias
		method = 'PUT'
	else:
		url = store + '/api' + namespace + '/'
		method = 'POST'

	try:
		data = stream.readall()
	except AttributeError:
		data = stream.read()

	if isinstance(data, str):
		data = data.encode()

	payload = {}

	payload['filename'] = filename
	payload['type'] = 'text/plain'

	if stream is not sys.stdin:
		headers['filename'] = stream.name

	mime = mimetypes.guess_type(payload['filename'])[0]
	if mime:
		payload['type'] = mime

	payload['size'] = len(data)

	payload['expire'] = time.time() + interval
	payload['locked'] = True

	headers = {'Content-Type': 'application/json'}

	try:
		response = json.loads(urllib.request.urlopen(urllib.request.Request(url, json.dumps(payload).encode(), headers, method=method)).read().decode())
	except urllib.error.HTTPError as error:
		response = json.loads(error.read().decode())

		if response['error'] == 409:
			raise AliasExistsError() from error
		elif response['error'] == 413:
			raise FileTooLargeError() from error
		elif response['error'] == 404:
			raise BadAliasError() from error
		else:
			raise UnknownError() from error

	url = store + '/store' + namespace + '/' + response['alias']
	method = 'PUT'

	headers = {'Content-Length': len(data)}

	urllib.request.urlopen(urllib.request.Request(url, data, headers, method=method))

	location = service + '/' + response['alias']

	return location

if __name__ == '__main__':
	import sys

	from argparse import ArgumentParser, FileType

	parser = ArgumentParser(description='upload files to the file drop service at {}'.format(service))
	parser.add_argument('-a', '--alias', dest='alias', help='alias to upload files under (random if omitted)')
	parser.add_argument('-f', '--filename', dest='filename', default='stream.txt', help='filename to use for upload (guessed if omitted)')
	parser.add_argument('file', nargs='?', default=sys.stdin, type=FileType('rb'), help='file to upload (reads from stdin if omitted)')

	args = parser.parse_args()

	try:
		print('created at ' + upload(args.file, args.alias, args.filename))
	except AliasExistsError:
		print('tmp.py: error: alias already exists', file=sys.stderr)
		sys.exit(3)
	except FileTooLargeError:
		print('tmp.py: error: input file is too large', file=sys.stderr)
		sys.exit(4)
	except BadAliasError:
		print('tmp.py: error: alias does not exist', file=sys.stderr)
		sys.exit(5)
	except UnknownError:
		print('tmp.py: error: an unknown error occured', file=sys.stderr)
		sys.exit(1)
